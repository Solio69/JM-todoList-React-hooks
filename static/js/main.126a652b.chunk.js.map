{"version":3,"sources":["components/NewTaskForm/NewTaskForm.js","components/Timer/Timer.js","components/Task/Task.js","components/TaskList/TaskList.js","components/TasksFilter/TasksFilter.js","components/Footer/Footer.js","components/App/App.js","index.js"],"names":["NewTaskForm","onItemAdded","useState","label","setOnLabelChange","onSubmit","event","preventDefault","className","placeholder","onChange","target","value","Timer","timerData","changeTimer","id","hours","minutes","seconds","time","setTime","intervalId","setIntervalId","useEffect","clearInterval","updateSec","updateMin","updateHours","strOutput","val","newStr","String","length","secondsOutput","minutesOutput","hoursOutput","type","onClick","newIntervalId","setInterval","defaultProps","Task","onDeleted","onToggleEdit","onToggleDone","item","addEditedItem","dateСreation","completed","editing","updateLabel","newItem","dateObj","Date","wasCreated","formatDistanceToNow","includeSeconds","addSuffix","checked","e","defaultValue","onBlur","onKeyPress","key","TaskList","todos","elements","map","i","index","TasksFilter","itemStatusFilter","onFilterChange","displayButtons","name","Footer","taskCount","clearCompleted","App","JSON","parse","localStorage","getItem","todoData","setTodoData","filter","setFilter","toggleProperties","arr","propertyName","ind","findIndex","el","newArr","filtersItems","filters","tasksLeftCount","setItem","stringify","text","Math","floor","random","push","_","updateItem","updatTimerData","filterName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.126a652b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './NewTaskForm.css';\nimport PropTypes from 'prop-types';\n\nconst NewTaskForm = function ({ onItemAdded }) {\n  // по умолчанию label пустая строка\n  const [label, setOnLabelChange] = useState('');\n\n  // следит за value в input и изменяет State\n  const onChange = (event) => {\n    setOnLabelChange(event.target.value);\n  };\n\n  // по событию onSubmit передает измененный label родителю\n  const onSubmit = (event) => {\n    event.preventDefault();\n    onItemAdded(label);\n    // изменяет State\n    setOnLabelChange('');\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"new-todo-form\">\n      <input className=\"new-todo\" placeholder=\"What needs to be done?\" onChange={onChange} value={label} />\n    </form>\n  );\n};\n\nNewTaskForm.propTypes = {\n  onItemAdded: PropTypes.func.isRequired,\n};\n\nexport default NewTaskForm;\n","/* eslint-disable no-plusplus */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Timer = function ({ timerData, changeTimer, id }) {\n  const [time, setTime] = useState({\n    hours: 9,\n    minutes: 59,\n    seconds: 0,\n  });\n  const [intervalId, setIntervalId] = useState(0);\n\n  // устанавливает в таймер занчения из timerData и очищает интервал при размонтировании\n  useEffect(() => {\n    setTime({ ...timerData });\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [timerData, intervalId]);\n\n  // обновляемые знаение time\n  let updateSec = time.seconds;\n  let updateMin = time.minutes;\n  let updateHours = time.hours;\n\n  // изменяет time\n  const run = () => {\n    if (updateSec < 59) {\n      updateSec++;\n    } else {\n      updateMin++;\n      updateSec = 0;\n\n      if (updateMin < 59) {\n        updateMin++;\n      } else {\n        updateHours++;\n        updateMin = 0;\n      }\n    }\n    // возвращает новызначения time\n    return setTime({ ...time, seconds: updateSec, minutes: updateMin, hours: updateHours });\n  };\n\n  // включить таймер\n  const startTimer = () => {\n    // очищаем setInterval если он уже запущен\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(0);\n    }\n\n    const newIntervalId = setInterval(() => {\n      run();\n    }, 1000);\n\n    // записываем в intervalId результат выполнения ф-и newIntervalId\n    setIntervalId(newIntervalId);\n  };\n\n  // остановить таймер\n  const stopTimer = () => {\n    if (intervalId) {\n      clearInterval(intervalId);\n      setIntervalId(0);\n    }\n\n    // при остановке таймера передаем его данные в родителю\n    changeTimer(id, time);\n  };\n\n  // приобразует строки вывода таймера\n  const strOutput = (val) => {\n    const newStr = String(val);\n    return newStr.length === 1 ? `0${newStr}` : newStr;\n  };\n\n  // приобразованные строки с значениями time\n  const secondsOutput = strOutput(time.seconds);\n  const minutesOutput = strOutput(time.minutes);\n  const hoursOutput = strOutput(time.hours);\n\n  return (\n    <span className=\"description\">\n      <button className=\"icon icon-play\" type=\"button\" aria-label=\"icon-play \" onClick={startTimer} />\n      <button className=\"icon icon-pause\" type=\"button\" aria-label=\"icon-pause\" onClick={stopTimer} />\n      {hoursOutput}:{minutesOutput}:{secondsOutput}\n    </span>\n  );\n};\nTimer.propTypes = {\n  id: PropTypes.number.isRequired,\n  timerData: PropTypes.shape({\n    hours: PropTypes.number,\n    minutes: PropTypes.number,\n    seconds: PropTypes.number,\n    intervalId: PropTypes.number,\n  }),\n  changeTimer: PropTypes.func.isRequired,\n};\n\nTimer.defaultProps = {\n  timerData: {\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  },\n};\n\nexport default Timer;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React from 'react';\nimport './Task.css';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\nimport Timer from '../Timer/Timer';\n\nconst Task = function ({ onDeleted, onToggleEdit, onToggleDone, item, changeTimer, addEditedItem }) {\n  const { label, dateСreation, completed, editing, timerData, id } = item;\n\n  // обновляет label\n  const updateLabel = (event) => {\n    const newItem = { ...item };\n    newItem.label = event.target.value;\n    newItem.editing = false;\n    // вызывает ф-ю обновления элемента\n    addEditedItem(id, newItem);\n  };\n\n  // при потере фокуса с input\n  const onBlur = (event) => {\n    updateLabel(event);\n  };\n\n  // при нажатии Enter\n  const onKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      updateLabel(event);\n    }\n  };\n\n  // превращем строку обатно в объект\n  const dateObj = new Date(dateСreation);\n  // возвращает строку с информацией сколько минут/секунд назад создан Task\n  const wasCreated = formatDistanceToNow(dateObj, { includeSeconds: true }, { addSuffix: true });\n\n  let className = '';\n\n  if (completed) {\n    className += ' completed';\n  }\n\n  if (editing) {\n    className += ' editing';\n  }\n\n  return (\n    <li className={className}>\n      <div className=\"view\">\n        <input className=\"toggle\" type=\"checkbox\" checked={!!completed} onChange={onToggleDone} />\n        {/* e.preventDefault для того, что бы клик по label не включал timer */}\n        <label onClick={(e) => e.preventDefault()}>\n          <span className=\"title\">{label}</span>\n          <Timer changeTimer={changeTimer} timerData={timerData} id={id} />\n          <span className=\"created\">created {wasCreated} ago</span>\n        </label>\n        <button className=\"icon icon-edit\" type=\"button\" aria-label=\"Icon input edit\" onClick={onToggleEdit} />\n        <button className=\"icon icon-destroy\" type=\"button\" aria-label=\"Icon input deleted\" onClick={onDeleted} />\n      </div>\n      <input type=\"text\" className=\"edit\" defaultValue={label} onBlur={onBlur} onKeyPress={onKeyPress} />\n    </li>\n  );\n};\n\nTask.propTypes = {\n  item: PropTypes.shape({\n    label: PropTypes.string,\n    completed: PropTypes.bool,\n    editing: PropTypes.bool,\n    dateСreation: PropTypes.string,\n    id: PropTypes.number,\n    timerData: PropTypes.shape({\n      hours: PropTypes.number,\n      minutes: PropTypes.number,\n      seconds: PropTypes.number,\n      intervalId: PropTypes.number,\n    }),\n  }).isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onToggleEdit: PropTypes.func.isRequired,\n  addEditedItem: PropTypes.func.isRequired,\n  onToggleDone: PropTypes.func.isRequired,\n  changeTimer: PropTypes.func.isRequired,\n};\nexport default Task;\n","import React from 'react';\nimport './TaskList.css';\nimport PropTypes from 'prop-types';\nimport Task from '../Task/Task';\n\nconst TaskList = function ({ todos, onDeleted, onToggleDone, onToggleEdit, addEditedItem, changeTimer }) {\n  // console.log(TaskList.defaultProps)\n\n  const elements = todos.map((item, i) => {\n    const { id } = item;\n\n    return (\n      <Task\n        item={item}\n        key={id}\n        index={i}\n        onDeleted={() => onDeleted(id)}\n        onToggleDone={() => {\n          onToggleDone(id);\n        }}\n        onToggleEdit={() => {\n          onToggleEdit(id);\n        }}\n        addEditedItem={addEditedItem}\n        changeTimer={changeTimer}\n      />\n    );\n  });\n\n  return <ul className=\"todo-list\">{elements}</ul>;\n};\nTaskList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  onDeleted: PropTypes.func.isRequired,\n  onToggleDone: PropTypes.func.isRequired,\n  onToggleEdit: PropTypes.func.isRequired,\n  addEditedItem: PropTypes.func.isRequired,\n  changeTimer: PropTypes.func.isRequired,\n};\n\nexport default TaskList;\n","import React from 'react';\nimport './TasksFilter.css';\nimport PropTypes from 'prop-types';\n\nconst TasksFilter = function ({ itemStatusFilter, onFilterChange }) {\n  const buttons = [\n    { name: 'all', label: 'All' },\n    { name: 'active', label: 'Active' },\n    { name: 'completed', label: 'Completed' },\n  ];\n\n  // отображает кнопки\n  const displayButtons = buttons.map(({ name, label }) => {\n    // если установлен фильтр и он соответсвтует name\n    const isActive = itemStatusFilter === name;\n\n    // то добавляем класс активной кнопки\n    const className = isActive ? 'selected' : '';\n\n    return (\n      <li key={name}>\n        <button\n          className={className}\n          type=\"button\"\n          // следит за кликом по кнопке, передает инфо о выбранной родителю\n          onClick={() => onFilterChange(name)}\n        >\n          {label}\n        </button>\n      </li>\n    );\n  });\n  return <ul className=\"filters\">{displayButtons}</ul>;\n};\nTasksFilter.defaultProps = {\n  itemStatusFilter: 'all',\n};\n\nTasksFilter.propTypes = {\n  onFilterChange: PropTypes.func.isRequired,\n  itemStatusFilter: PropTypes.string,\n};\nexport default TasksFilter;\n","import React from 'react';\nimport './Footer.css';\nimport PropTypes from 'prop-types';\n\nimport TasksFilter from '../TasksFilter/TasksFilter';\n\nconst Footer = function ({ taskCount, itemStatusFilter, onFilterChange, clearCompleted }) {\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{taskCount} items left</span>\n      <TasksFilter itemStatusFilter={itemStatusFilter} onFilterChange={onFilterChange} />\n      <button className=\"clear-completed\" type=\"button\" onClick={clearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.defaultProps = {\n  itemStatusFilter: 'all',\n  taskCount: null,\n};\n\nFooter.propTypes = {\n  itemStatusFilter: PropTypes.string,\n  taskCount: PropTypes.number,\n  onFilterChange: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport NewTaskForm from '../NewTaskForm/NewTaskForm';\nimport TaskList from '../TaskList/TaskList';\nimport Footer from '../Footer/Footer';\n\nconst App = function () {\n  // если в localStorage есть данные, то устанавливает значение из localStorage, если нет, то пустой массив\n  const [todoData, setTodoData] = useState(JSON.parse(localStorage.getItem('todoData')) || []);\n\n  // если в localStorage есть данные, то устанавливает значение из localStorage, если нет, то 'all'\n  const [filter, setFilter] = useState(JSON.parse(localStorage.getItem('filter')) || 'all');\n\n  const createTodoItem = (label) => {\n    const str = String(new Date());\n\n    return {\n      label,\n      completed: false,\n      editing: false,\n      dateСreation: str,\n      id: Math.floor(Math.random() * (1000 - 1) + 1),\n      timerData: {\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        intervalId: 0,\n      },\n    };\n  };\n\n  // добавляет элемент в список\n  const addItem = (text) => {\n    const newItem = createTodoItem(text);\n    const newArr = [...todoData];\n    newArr.push(newItem);\n    return setTodoData([...newArr]);\n  };\n\n  // удаляет элемент списка\n  const deleteItem = (id) => {\n    const ind = todoData.findIndex((el) => el.id === id);\n    // eslint-disable-next-line id-length\n    const newArr = todoData.filter((_, index) => index !== ind);\n    return setTodoData([...newArr]);\n  };\n\n  // обновляет свойства элемента\n  const toggleProperties = (arr, id, propertyName) => {\n    const ind = arr.findIndex((el) => el.id === id);\n    const newArr = [...arr];\n    newArr[ind][propertyName] = !newArr[ind][propertyName];\n    return newArr;\n  };\n\n  // обновляет список с учетом выполненный tasks\n  const onToggleDone = (id) => {\n    setTodoData([...toggleProperties(todoData, id, 'completed')]);\n  };\n\n  // обновляет список с учетом отредактированный tasks\n  const addEditedItem = (id, updateItem) => {\n    const newArr = [...todoData];\n    const ind = newArr.findIndex((el) => el.id === id);\n    newArr[ind] = updateItem;\n    return setTodoData([...newArr]);\n  };\n\n  // обновляет список с учетом радактируемых в данный момент tasks\n  const onToggleEdit = (id) => {\n    setTodoData([...toggleProperties(todoData, id, 'editing')]);\n  };\n\n  const changeTimer = (id, updatTimerData) => {\n    const newArr = [...todoData];\n    const ind = newArr.findIndex((el) => el.id === id);\n    newArr[ind].timerData = updatTimerData;\n    return setTodoData([...newArr]);\n  };\n\n  // изменяет значение свойства filter\n  const onFilterChange = (filterName) => {\n    setFilter(filterName);\n  };\n\n  // удаляет все выполненные tasks\n  const clearCompleted = () => setTodoData([...todoData].filter((item) => !item.completed));\n\n  // фильтры\n  // eslint-disable-next-line no-shadow\n  const filters = (arr, filter) => {\n    switch (filter) {\n      case 'all':\n        return arr;\n      case 'completed':\n        return arr.filter((item) => item.completed);\n      case 'active':\n        return arr.filter((item) => !item.completed);\n      default:\n        return arr;\n    }\n  };\n\n  // отфильтрованные элементы\n  const filtersItems = filters(todoData, filter);\n\n  // счетчик невыполненных задач\n  const tasksLeftCount = todoData.filter((el) => !el.completed).length;\n\n  // изменяет localStorage\n  localStorage.setItem('todoData', JSON.stringify(todoData));\n  localStorage.setItem('filter', JSON.stringify(filter));\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n        <NewTaskForm onItemAdded={addItem} />\n      </header>\n      <section className=\"main\">\n        <TaskList\n          todos={filtersItems}\n          onDeleted={deleteItem}\n          onToggleDone={onToggleDone}\n          onToggleEdit={onToggleEdit}\n          addEditedItem={addEditedItem}\n          changeTimer={changeTimer}\n        />\n        <Footer\n          taskCount={tasksLeftCount}\n          itemStatusFilter={filter}\n          onFilterChange={onFilterChange}\n          clearCompleted={clearCompleted}\n        />\n      </section>\n    </section>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}